# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [main]
    paths:
      # pour eviter de reconstruire si on modifie un fichier autre que dans src
      - 'src/**'
      - '.github/workflows/maven.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - '.github/workflows/maven.yml'
    types: [opened, synchronize, reopened]

jobs:
  init-workflow:
    name: init workflow
    runs-on: ubuntu-latest  #os
    steps:
      # message informatif
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  project-build:
    name: Construct JAR
    runs-on: ubuntu-latest  #os
    needs:
      - init-workflow
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Start MySQL
        run : sudo service mysql start

      - name: Create Database from script
        run: mysql -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "source infra/mysql/dump/sparadrap.sql"

      - name: Install Chrome Browser for selenium
        uses: browser-actions/setup-chrome@latest

      - name: run Chrome Browser for version control
        run: chrome --version

      - name: Set up JDK 17
      # v4 node.js runtime v20
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build jar and analyze SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=neojero_springboot_api

      # permet de charger un artefact
      - name: Charging artefact
        uses: actions/upload-artifact@v4
        with:
         name: package.jar
         path: target/*.jar
         retention-days: 1

      # message de fin indiquant que tout s'est bien pass√©
      - run: echo "üçè This job's status is ${{ job.status }}."

  docker-build-image-api:
    # v√©rifie que le d√©clenchement provient de la branche main
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - project-build
    steps:
      - uses: actions/checkout@v4

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: package.jar

      # juste pour le contr√¥le
      - name: List files in the repository
        run: ls ${{ github.workspace }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/apimage:apimage-latest

      # message de fin indiquant que tout s'est bien pass√©
      - run: echo "üçè This job's status is ${{ job.status }}."

  build-and-push-container:
    # v√©rifie que le d√©clenchement provient de la branche main
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - docker-build-image-api
    steps:
      - name : Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker image from Docker Compose
        run: |
            docker-compose -f docker-compose.yml build
            docker-compose -f docker-compose.yml push mysql

      # message de fin indiquant que tout s'est bien pass√©
      - run: echo "üçè This job's status is ${{ job.status }}."